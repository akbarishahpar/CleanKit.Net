using CleanKit.Net.Application.Abstractions.Providers;
using CleanKit.Net.DependencyInjection;
using CleanKit.Net.Presentation.Middleware;
using CleanKit.Net.Presentation.Providers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.Filters;
using System.Reflection;
using System.Text;
using CleanKit.Net.Presentation.Options;

namespace CleanKit.Net.Presentation;

public static class DependencyInjection
{
    private static Action<JwtBearerOptions> ConfigureJwtBearerOptions(
        IServiceCollection services,
        IConfiguration configuration
    ) =>
        (JwtBearerOptions options) =>
        {
            var jwtOptions = configuration.GetSection(nameof(JwtOptions)).Get<JwtOptions>();

            if (jwtOptions is null)
                throw new NullReferenceException(
                    "JwtOptions is not defined at the settings section"
                );

            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = jwtOptions.Issuer,
                ValidAudience = jwtOptions.Audience,
                IssuerSigningKey = new SymmetricSecurityKey(
                    Encoding.UTF8.GetBytes(jwtOptions.SignatureKey)
                ),
                ClockSkew = TimeSpan.Zero
            };

            if (string.IsNullOrEmpty(jwtOptions.EncryptionKey))
                return;
            var encryptionKey = Encoding.UTF8.GetBytes(jwtOptions.EncryptionKey); //must be 16 character
            var encryptingCredentials = new EncryptingCredentials(
                new SymmetricSecurityKey(encryptionKey),
                SecurityAlgorithms.Aes128KW,
                SecurityAlgorithms.Aes128CbcHmacSha256
            );
            options.TokenValidationParameters.TokenDecryptionKey = encryptingCredentials.Key;
        };

    public static void AddJwtBearer(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddOptions<JwtOptions>(configuration);
        services.AddScoped<IJwtProvider, JwtProvider>();
        services
            .AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            .AddJwtBearer(ConfigureJwtBearerOptions(services, configuration));
    }

    public static void AddSwagger(
        this IServiceCollection services,
        OpenApiInfo openApiInfo,
        Assembly examplesAssembly
    )
    {
        //Adding Swagger document generator service
        services.AddSwaggerGen(options =>
        {
            //Using full name of type for schemas
            options.CustomSchemaIds(x => x.FullName);

            //Adding basic information
            options.SwaggerDoc("v1", openApiInfo);

            //Enabling examples
            options.ExampleFilters();

            //Adding authorization and other schemas
            var schemes = new List<OpenApiSecurityScheme>
            {
                new()
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    },
                    Description =
                        "Standard Authorization header using the Bearer scheme (JWT). Example: \"bearer {token}\"",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                }
            };

            foreach (var scheme in schemes)
            {
                options.AddSecurityDefinition(scheme.Reference.Id, scheme);
                options.AddSecurityRequirement(
                    new OpenApiSecurityRequirement { { scheme, Array.Empty<string>() } }
                );
            }

            //Adding comments generated by annotations
            options.EnableAnnotations();
        });

        //Enabling examples
        services.AddSwaggerExamplesFromAssemblies(examplesAssembly);
    }

    public static void AddExceptionCapturing(this IServiceCollection services)
    {
        services.AddScoped<ExceptionCapturingOptions>();
        services.AddScoped<ExceptionCapturingMiddleware>();
    }

    public static void AddExceptionCapturing(this IServiceCollection services, Action<ExceptionCapturingOptions> optionsConfigurator)
    {
        var exceptionCapturingOptions = new ExceptionCapturingOptions();
        optionsConfigurator(exceptionCapturingOptions);
        services.AddScoped(_ => exceptionCapturingOptions);
        services.AddScoped<ExceptionCapturingMiddleware>();
    }

    public static void UseExceptionCapturing(this IApplicationBuilder app)
    {
        app.UseMiddleware<ExceptionCapturingMiddleware>();
    }
}
